name: Cross Compile Go Project

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            goarch: amd64
          - os: linux
            goarch: arm64
          - os: darwin
            goarch: amd64
          - os: darwin
            goarch: arm64
          - os: windows
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.0'
        cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.11.1'
        cache: 'npm'
        cache-dependency-path: |
          front/palworld-front/package.json
          front/palworld-front/package-lock.json

    - name: Install Quasar CLI and dependencies
      working-directory: front/palworld-front
      run: |
        npm install -g @quasar/cli
        npm install

    - name: Build Quasar Project
      working-directory: front/palworld-front
      run: |
        quasar build

    - name: Create output directory
      run: mkdir -p output

    - name: Compile Go for target
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        OUTPUT_NAME="palworld-go-${{ matrix.os }}-${{ matrix.goarch }}"
        if [ "$GOOS" = "windows" ]; then
          OUTPUT_NAME="${OUTPUT_NAME}.exe"
        fi
        go build -v -ldflags="-s -w" -o "output/${OUTPUT_NAME}"

    - name: Compress executable files with UPX
      run: |
        sudo apt-get update && sudo apt-get install -y upx
        OUTPUT_NAME="palworld-go-${{ matrix.os }}-${{ matrix.goarch }}"
        if [ "$GOOS" = "windows" ]; then
          OUTPUT_NAME="${OUTPUT_NAME}.exe"
        fi
        if [[ "${{ matrix.os }}" != "android" || "${{ matrix.goarch }}" != "arm64" ]]; then
          upx --best --lzma "output/${OUTPUT_NAME}" || echo "UPX compression failed, continuing with uncompressed binary"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: palworld-go-${{ matrix.os }}-${{ matrix.goarch }}
        path: output/palworld-go-${{ matrix.os }}-${{ matrix.goarch }}${{ matrix.os == 'windows' && '.exe' || '' }}
        retention-days: 5

  prepare_release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: output

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: output/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}